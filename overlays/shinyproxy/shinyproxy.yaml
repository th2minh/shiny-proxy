apiVersion: v1
kind: Namespace
metadata:
  name: shinyproxy-operator
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: shinyproxies.openanalytics.eu
spec:
  group: openanalytics.eu
  names:
    kind: ShinyProxy
    plural: shinyproxies
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ShinyProxy
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          spec:
            description: Specification of the ShinyProxy (i.e. application.yml)
            properties:
              appNamespaces:
                items:
                  type: string
                type: array
              fqdn:
                type: string
              image:
                type: string
              imagePullPolicy:
                type: string
              kubernetesPodTemplateSpecPatches:
                type: string
              proxy:
                properties:
                  adminGroups:
                    items:
                      type: string
                    type: array
                  authentication:
                    enum:
                    - ldap
                    - kerberos
                    - keycloak
                    - openid
                    - saml
                    - social
                    - simple
                    - none
                    type: string
                  bindAddress:
                    type: string
                  containerWaitTime:
                    type: integer
                  heartbeatRate:
                    type: integer
                  heartbeatTimeout:
                    type: integer
                  hideNavbar:
                    type: boolean
                  landingPage:
                    type: string
                  logoUrl:
                    type: string
                  port:
                    type: integer
                  specs:
                    items:
                      properties:
                        accessGroups:
                          items:
                            type: string
                          type: array
                        containerCmd:
                          items:
                            type: string
                          type: array
                        containerCpuLimit:
                          type: string
                        containerCpuRequest:
                          type: string
                        containerDns:
                          type: string
                        containerEnv:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        containerImage:
                          type: string
                        containerMemory:
                          type: string
                        containerMemoryLimit:
                          type: string
                        containerMemoryRequest:
                          type: string
                        containerNetwork:
                          type: string
                        containerPrivileged:
                          type: boolean
                        containerVolumes:
                          items:
                            type: string
                          type: array
                        displayName:
                          type: string
                        id:
                          type: string
                        kubernetesPodPatches:
                          type: string
                      required:
                      - id
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    type: array
                  templatePath:
                    type: string
                  title:
                    type: string
                type: object
                x-kubernetes-preserve-unknown-fields: true
            required:
            - proxy
            - fqdn
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            description: ShinyProxyStatus defines the observed state of ShinyProxy
            properties:
              instances:
                items:
                  properties:
                    hashOfSpec:
                      type: string
                    isLatestInstance:
                      type: boolean
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ShinyProxy
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          spec:
            description: Specification of the ShinyProxy (i.e. application.yml)
            properties:
              appNamespaces:
                items:
                  type: string
                type: array
              fqdn:
                type: string
              image:
                type: string
              imagePullPolicy:
                type: string
              kubernetesPodTemplateSpecPatches:
                type: string
              proxy:
                properties:
                  adminGroups:
                    items:
                      type: string
                    type: array
                  authentication:
                    enum:
                    - ldap
                    - kerberos
                    - keycloak
                    - openid
                    - saml
                    - social
                    - simple
                    - none
                    type: string
                  bindAddress:
                    type: string
                  containerWaitTime:
                    type: integer
                  heartbeatRate:
                    type: integer
                  heartbeatTimeout:
                    type: integer
                  hideNavbar:
                    type: boolean
                  landingPage:
                    type: string
                  logoUrl:
                    type: string
                  port:
                    type: integer
                  specs:
                    items:
                      properties:
                        accessGroups:
                          items:
                            type: string
                          type: array
                        containerCmd:
                          items:
                            type: string
                          type: array
                        containerCpuLimit:
                          type: string
                        containerCpuRequest:
                          type: string
                        containerDns:
                          type: string
                        containerEnv:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        containerImage:
                          type: string
                        containerMemory:
                          type: string
                        containerMemoryLimit:
                          type: string
                        containerMemoryRequest:
                          type: string
                        containerNetwork:
                          type: string
                        containerPrivileged:
                          type: boolean
                        containerVolumes:
                          items:
                            type: string
                          type: array
                        displayName:
                          type: string
                        id:
                          type: string
                        kubernetesPodPatches:
                          type: string
                      required:
                      - id
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    type: array
                  templatePath:
                    type: string
                  title:
                    type: string
                type: object
                x-kubernetes-preserve-unknown-fields: true
            required:
            - proxy
            - fqdn
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            description: ShinyProxyStatus defines the observed state of ShinyProxy
            properties:
              instances:
                items:
                  properties:
                    hashOfSpec:
                      type: string
                    isLatestInstance:
                      type: boolean
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis
  namespace: shinyproxy-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shinyproxy-operator-sa
  namespace: shinyproxy-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shinyproxy-sa
  namespace: shinyproxy-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: shinyproxy-operator-role
  namespace: shinyproxy-operator
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - openanalytics.eu
  resources:
  - shinyproxies
  - shinyproxies/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - customresource
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: shinyproxy-sa-role
  namespace: shinyproxy-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shinyproxy-operator-rolebinding
  namespace: shinyproxy-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: shinyproxy-operator-role
subjects:
- kind: ServiceAccount
  name: shinyproxy-operator-sa
  namespace: shinyproxy-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shinyproxy-sa-rolebinding
  namespace: shinyproxy-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: shinyproxy-sa-role
subjects:
- kind: ServiceAccount
  name: shinyproxy-sa
  namespace: shinyproxy-operator
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
  sentinel.conf: |-
    dir "/tmp"
    port 26379
    sentinel monitor shinyproxy redis-node-0.redis-headless 6379 2
    sentinel down-after-milliseconds shinyproxy 60000
    sentinel failover-timeout shinyproxy 180000
    sentinel parallel-syncs shinyproxy 1
    # User-supplied sentinel configuration:
    # End of sentinel configuration
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis-configuration
  namespace: shinyproxy-operator
---
apiVersion: v1
data:
  parse_sentinels.awk: |-
    /ip/ {FOUND_IP=1}
    /port/ {FOUND_PORT=1}
    /runid/ {FOUND_RUNID=1}
    !/ip|port|runid/ {
      if (FOUND_IP==1) {
        IP=$1; FOUND_IP=0;
      }
      else if (FOUND_PORT==1) {
        PORT=$1;
        FOUND_PORT=0;
      } else if (FOUND_RUNID==1) {
        printf "\nsentinel known-sentinel shinyproxy %s %s %s", IP, PORT, $0; FOUND_RUNID=0;
      }
    }
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_sentinel.sh: |-
    #!/bin/bash
    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_SENTINEL_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis-health
  namespace: shinyproxy-operator
---
apiVersion: v1
data:
  prestop-redis.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libos.sh

    run_redis_command() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            redis-cli -h 127.0.0.1 -p "$REDIS_TLS_PORT" --tls --cert "$REDIS_TLS_CERT_FILE" --key "$REDIS_TLS_KEY_FILE" --cacert "$REDIS_TLS_CA_FILE" "$@"
        else
            redis-cli -h 127.0.0.1 -p "$REDIS_PORT" "$@"
        fi
    }
    failover_finished() {
        REDIS_ROLE=$(run_redis_command role | head -1)
        [[ "$REDIS_ROLE" != "master" ]]
    }

    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    if ! failover_finished; then
        echo "I am the master pod and you are stopping me."
        # Running failover command
        echo "Running the FAILOVER command"
        run_redis_command FAILOVER TIMEOUT "20000"
        # Waiting for the failover to finish
        echo "Waiting for the failover to finish up to 20s"
        if retry_while "failover_finished" "20" 1
            echo "Master has been successfuly failed over to a different pod."
            exit 0
        else
            echo "Master failover failed"
            exit 1
        fi
    else
        exit 0
    fi
  prestop-sentinel.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libos.sh

    HEADLESS_SERVICE="redis-headless.$REDIS_NAMESPACE.svc.cluster.local"
    SENTINEL_SERVICE_ENV_NAME=REDIS_SERVICE_PORT_TCP_SENTINEL
    SENTINEL_SERVICE_PORT=${!SENTINEL_SERVICE_ENV_NAME}

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }
    run_sentinel_command() {
        if is_boolean_yes "$REDIS_SENTINEL_TLS_ENABLED"; then
            redis-cli -h "$REDIS_SERVICE" -p "$SENTINEL_SERVICE_PORT" --tls --cert "$REDIS_SENTINEL_TLS_CERT_FILE" --key "$REDIS_SENTINEL_TLS_KEY_FILE" --cacert "$REDIS_SENTINEL_TLS_CA_FILE" sentinel "$@"
        else
            redis-cli -h "$REDIS_SERVICE" -p "$SENTINEL_SERVICE_PORT" sentinel "$@"
        fi
    }
    failover_finished() {
      REDIS_SENTINEL_INFO=($(run_sentinel_command get-master-addr-by-name "shinyproxy"))
      REDIS_MASTER_HOST="${REDIS_SENTINEL_INFO[0]}"
      [[ "$REDIS_MASTER_HOST" != "$(get_full_hostname $HOSTNAME)" ]]
    }

    REDIS_SERVICE="redis.$REDIS_NAMESPACE.svc.cluster.local"

    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    if ! failover_finished; then
        echo "I am the master pod and you are stopping me. Starting sentinel failover"
        # if I am the master, issue a command to failover once and then wait for the failover to finish
        run_sentinel_command failover "shinyproxy"
        if retry_while "failover_finished" "20" 1; then
            echo "Master has been successfuly failed over to a different pod."
            exit 0
        else
            echo "Master failover failed"
            exit 1
        fi
    else
        exit 0
    fi
  start-node.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libos.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    HEADLESS_SERVICE="redis-headless.$REDIS_NAMESPACE.svc.cluster.local"

    if [ -n "$REDIS_EXTERNAL_MASTER_HOST" ]; then
        REDIS_SERVICE="$REDIS_EXTERNAL_MASTER_HOST"
    else
        REDIS_SERVICE="redis.$REDIS_NAMESPACE.svc.cluster.local"
    fi

    SENTINEL_SERVICE_PORT=$(get_port "redis" "TCP_SENTINEL")
    validate_quorum() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            quorum_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel master shinyproxy"
        else
            quorum_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel master shinyproxy"
        fi
        info "about to run the command: $quorum_info_command"
        eval $quorum_info_command | grep -Fq "s_down"
    }

    trigger_manual_failover() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            failover_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel failover shinyproxy"
        else
            failover_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel failover shinyproxy"
        fi

        info "about to run the command: $failover_command"
        eval $failover_command
    }

    get_sentinel_master_info() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel get-master-addr-by-name shinyproxy"
        else
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name shinyproxy"
        fi

        info "about to run the command: $sentinel_info_command"
        eval $sentinel_info_command
    }

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"

    # check if there is a master
    master_in_persisted_conf="$(get_full_hostname "$HOSTNAME")"
    master_port_in_persisted_conf="$REDIS_MASTER_PORT_NUMBER"
    master_in_sentinel="$(get_sentinel_master_info)"
    redisRetVal=$?

    if [[ $redisRetVal -ne 0 ]]; then
        if [[ "$master_in_persisted_conf" == "$(get_full_hostname "$HOSTNAME")" ]]; then
            # Case 1: No active sentinel and in previous sentinel.conf we were the master --> MASTER
            info "Configuring the node as master"
            export REDIS_REPLICATION_MODE="master"
        else
            # Case 2: No active sentinel and in previous sentinel.conf we were not master --> REPLICA
            info "Configuring the node as replica"
            export REDIS_REPLICATION_MODE="replica"
            REDIS_MASTER_HOST=${master_in_persisted_conf}
            REDIS_MASTER_PORT_NUMBER=${master_port_in_persisted_conf}
        fi
    else
        # Fetches current master's host and port
        REDIS_SENTINEL_INFO=($(get_sentinel_master_info))
        info "Current master: REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})"
        REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ "$REDIS_MASTER_HOST" == "$(get_full_hostname "$HOSTNAME")" ]]; then
            # Case 3: Active sentinel and master it is this node --> MASTER
            info "Configuring the node as master"
            export REDIS_REPLICATION_MODE="master"
        else
            # Case 4: Active sentinel and master is not this node --> REPLICA
            info "Configuring the node as replica"
            export REDIS_REPLICATION_MODE="replica"
        fi
    fi

    if [[ -n "$REDIS_EXTERNAL_MASTER_HOST" ]]; then
      REDIS_MASTER_HOST="$REDIS_EXTERNAL_MASTER_HOST"
      REDIS_MASTER_PORT_NUMBER="${REDIS_EXTERNAL_MASTER_PORT}"
    fi

    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi

    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")

    if [[ "$REDIS_REPLICATION_MODE" = "slave" ]] || [[ "$REDIS_REPLICATION_MODE" = "replica" ]]; then
        ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    fi
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    exec redis-server "${ARGS[@]}"
  start-sentinel.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libos.sh
    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libfile.sh

    HEADLESS_SERVICE="redis-headless.$REDIS_NAMESPACE.svc.cluster.local"
    REDIS_SERVICE="redis.$REDIS_NAMESPACE.svc.cluster.local"

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    SERVPORT=$(get_port "$HOSTNAME" "SENTINEL")
    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    SENTINEL_SERVICE_PORT=$(get_port "redis" "TCP_SENTINEL")

    sentinel_conf_set() {
        local -r key="${1:?missing key}"
        local value="${2:-}"

        # Sanitize inputs
        value="${value//\\/\\\\}"
        value="${value//&/\\&}"
        value="${value//\?/\\?}"
        [[ "$value" = "" ]] && value="\"$value\""

        replace_in_file "/opt/bitnami/redis-sentinel/etc/sentinel.conf" "^#*\s*${key} .*" "${key} ${value}" false
    }
    sentinel_conf_add() {
        echo $'\n'"$@" >> "/opt/bitnami/redis-sentinel/etc/sentinel.conf"
    }
    host_id() {
        echo "$1" | openssl sha1 | awk '{print $2}'
    }
    get_sentinel_master_info() {
        if is_boolean_yes "$REDIS_SENTINEL_TLS_ENABLED"; then
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name shinyproxy"
        else
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name shinyproxy"
        fi
        info "about to run the command: $sentinel_info_command"
        eval $sentinel_info_command
    }

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"

    master_in_persisted_conf="$(get_full_hostname "$HOSTNAME")"
    if ! get_sentinel_master_info && [[ "$master_in_persisted_conf" == "$(get_full_hostname "$HOSTNAME")" ]]; then
        # No master found, lets create a master node
        export REDIS_REPLICATION_MODE="master"

        REDIS_MASTER_HOST=$(get_full_hostname "$HOSTNAME")
        REDIS_MASTER_PORT_NUMBER="$REDISPORT"
    else
        export REDIS_REPLICATION_MODE="replica"

        # Fetches current master's host and port
        REDIS_SENTINEL_INFO=($(get_sentinel_master_info))
        info "printing REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})"
        REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}
    fi

    if [[ -n "$REDIS_EXTERNAL_MASTER_HOST" ]]; then
      REDIS_MASTER_HOST="$REDIS_EXTERNAL_MASTER_HOST"
      REDIS_MASTER_PORT_NUMBER="${REDIS_EXTERNAL_MASTER_PORT}"
    fi

    cp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nsentinel auth-pass %s %s" "shinyproxy" "$REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nrequirepass %s" "$REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nsentinel myid %s" "$(host_id "$HOSTNAME")" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf

    if [[ -z "$REDIS_MASTER_HOST" ]] || [[ -z "$REDIS_MASTER_PORT_NUMBER" ]]
    then
        # Prevent incorrect configuration to be written to sentinel.conf
        error "Redis master host is configured incorrectly (host: $REDIS_MASTER_HOST, port: $REDIS_MASTER_PORT_NUMBER)"
        exit 1
    fi

    sentinel_conf_set "sentinel monitor" "shinyproxy "$REDIS_MASTER_HOST" "$REDIS_MASTER_PORT_NUMBER" 2"

    add_known_sentinel() {
        hostname="$1"
        ip="$2"

        if [[ -n "$hostname" && -n "$ip" && "$hostname" != "$HOSTNAME" ]]; then
            sentinel_conf_add "sentinel known-sentinel shinyproxy $(get_full_hostname "$hostname") $(get_port "$hostname" "SENTINEL") $(host_id "$hostname")"
        fi
    }
    add_known_replica() {
        hostname="$1"
        ip="$2"

        if [[ -n "$ip" && "$(get_full_hostname "$hostname")" != "$REDIS_MASTER_HOST" ]]; then
            sentinel_conf_add "sentinel known-replica shinyproxy $(get_full_hostname "$hostname") $(get_port "$hostname" "REDIS")"
        fi
    }

    # Add available hosts on the network as known replicas & sentinels
    for node in $(seq 0 $((3-1))); do
        hostname="redis-node-$node"
        ip="$(getent hosts "$hostname.$HEADLESS_SERVICE" | awk '{ print $1 }')"
        add_known_sentinel "$hostname" "$ip"
        add_known_replica "$hostname" "$ip"
    done

    echo "" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-hostnames yes" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel resolve-hostnames yes" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-port $SERVPORT" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    exec redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis-scripts
  namespace: shinyproxy-operator
---
apiVersion: v1
data:
  redis-password: YWJj
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis
  namespace: shinyproxy-operator
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: node
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis
  namespace: shinyproxy-operator
spec:
  ports:
  - name: tcp-redis
    nodePort: null
    port: 6379
    targetPort: 6379
  - name: tcp-sentinel
    nodePort: null
    port: 26379
    targetPort: 26379
  selector:
    app.kubernetes.io/component: node
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis-headless
  namespace: shinyproxy-operator
spec:
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  - name: tcp-sentinel
    port: 26379
    targetPort: redis-sentinel
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: shinyproxy-operator
  name: shinyproxy-operator
  namespace: shinyproxy-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shinyproxy-operator
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: shinyproxy-operator
    spec:
      containers:
      - env:
        - name: SPO_MODE
          value: namespaced
        - name: SPO_PROBE_TIMEOUT
          value: "3"
        image: openanalytics/shinyproxy-operator:2.0.0
        imagePullPolicy: Always
        name: shinyproxy-operator
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      serviceAccountName: shinyproxy-operator-sa
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: node
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis
  name: redis-node
  namespace: shinyproxy-operator
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: redis
      app.kubernetes.io/name: redis
  serviceName: redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: 5fc00eb4a7018de18b31830c77065a7338b48ce0536f6ae28f8f61ca5769e15a
        checksum/health: 3669eb0c03c2dedf36e79e55cbdbdafa47482b6aa35defa8f701da00d62da537
        checksum/scripts: 33b54a2d76ac154d5e1c7fa012addc225b14bba86d37d87cf84be6f59fbb246c
        checksum/secret: 5454c63d631469c9b541b31de89a485a004d12f3694810c26acb18fbc76e8804
      labels:
        app.kubernetes.io/component: node
        app.kubernetes.io/instance: redis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.14
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: node
                  app.kubernetes.io/instance: redis
                  app.kubernetes.io/name: redis
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-node.sh
        command:
        - /bin/bash
        env:
        - name: REDIS_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DATA_DIR
          value: /data
        image: docker.io/bitnami/redis:7.0.5-debian-11-r25
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/bitnami/scripts/start-scripts/prestop-redis.sh
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 1
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsUser: 1001
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 22
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /opt/bitnami/scripts/start-scripts
          name: start-scripts
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/mounted-etc
          name: config
        - mountPath: /opt/bitnami/redis/etc
          name: redis-tmp-conf
        - mountPath: /tmp
          name: tmp
      - args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-sentinel.sh
        command:
        - /bin/bash
        env:
        - name: REDIS_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        - name: REDIS_SENTINEL_TLS_ENABLED
          value: "no"
        - name: REDIS_SENTINEL_PORT
          value: "26379"
        image: docker.io/bitnami/redis-sentinel:7.0.5-debian-11-r24
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/bitnami/scripts/start-scripts/prestop-sentinel.sh
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_sentinel.sh 5
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: sentinel
        ports:
        - containerPort: 26379
          name: redis-sentinel
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_sentinel.sh 1
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsUser: 1001
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_sentinel.sh 5
          failureThreshold: 22
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /opt/bitnami/scripts/start-scripts
          name: start-scripts
        - mountPath: /health
          name: health
        - mountPath: /opt/bitnami/redis-sentinel/etc
          name: sentinel-data
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis-sentinel/mounted-etc
          name: config
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: redis-scripts
        name: start-scripts
      - configMap:
          defaultMode: 493
          name: redis-health
        name: health
      - configMap:
          name: redis-configuration
        name: config
      - emptyDir: {}
        name: sentinel-data
      - emptyDir: {}
        name: redis-tmp-conf
      - emptyDir: {}
        name: tmp
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/component: node
        app.kubernetes.io/instance: redis
        app.kubernetes.io/name: redis
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis
  namespace: shinyproxy-operator
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: redis
      app.kubernetes.io/name: redis
---
apiVersion: openanalytics.eu/v1
kind: ShinyProxy
metadata:
  name: shinyproxy1
  namespace: shinyproxy-operator
spec:
  appNamespaces:
  - shinyproxy1-app
  fqdn: operator-demo.local
  image: openanalytics/shinyproxy:3.0.0
  imagePullPolicy: Always
  kubernetesIngressPatches: |
    - op: add
      path: /metadata/annotations
      value:
        nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 300m
    - op: add
      path: /spec/ingressClassName
      value: nginx
  kubernetesPodTemplateSpecPatches: |
    - op: add
      path: /spec/containers/0/env/-
      value:
        name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: redis
            key: redis-password
    - op: add
      path: /spec/containers/0/resources
      value:
        limits:
          cpu: 1
        requests:
          cpu: 0.5
    - op: add
      path: /spec/serviceAccountName
      value: shinyproxy-sa
  management:
    metrics:
      export:
        prometheus:
          enabled: true
  proxy:
    admin-groups: scientists
    authentication: simple
    containerBackend: kubernetes
    defaultMaxInstances: -1
    kubernetes:
      image-pull-policy: Always
      internal-networking: true
      namespace: shinyproxy-operator
    landingPage: /
    log-as-json: true
    logo-url: https://www.openanalytics.eu/shinyproxy/logo.png
    specs:
    - container-env:
        DISABLE_AUTH: true
        WWW_ROOT_PATH: '#{proxy.getRuntimeValue(''SHINYPROXY_PUBLIC_PATH'')}'
      container-image: openanalytics/shinyproxy-rstudio-ide-demo:1.4.1106__4.0.4
      display-name: RStudio
      id: rstudio
      max-instances: 5
      port: 8787
    - container-image: openanalytics/shinyproxy-dash-demo
      display-name: Dash Demo
      id: dash-demo
      kubernetes-pod-patches: |
        - op: replace
          path: /metadata/namespace
          value: shinyproxy1-app
      port: 8050
      target-path: '#{proxy.getRuntimeValue(''SHINYPROXY_PUBLIC_PATH'')}'
    - access-groups:
      - scientists
      - mathematicians
      container-cmd:
      - R
      - -e
      - shinyproxy::run_01_hello()
      container-image: openanalytics/shinyproxy-demo
      description: Application which demonstrates the basics of a Shiny app 2
      display-name: Hello Application
      id: 01_hello
      minimumSeatsAvailable: 2
    - access-groups: scientists
      container-cmd:
      - R
      - -e
      - shinyproxy::run_06_tabsets()
      container-image: openanalytics/shinyproxy-demo
      id: 06_tabsets
    store-mode: Redis
    title: Open Analytics Shiny Proxy
    usage-stats-url: micrometer
    users:
    - groups: scientists
      name: jack
      password: password
    - groups: mathematicians
      name: jeff
      password: password
  server:
    forward-headers-strategy: native
    servlet:
      context-path: /shinyproxy1
  spring:
    redis:
      password: ${REDIS_PASSWORD}
      sentinel:
        master: shinyproxy
        nodes: redis-node-0.redis-headless:26379, redis-node-1.redis-headless:26379,
          redis-node-2.redis-headless:26379
        password: ${REDIS_PASSWORD}
    session:
      store-type: redis
---
apiVersion: openanalytics.eu/v1
kind: ShinyProxy
metadata:
  name: shinyproxy2
  namespace: shinyproxy-operator
spec:
  fqdn: operator-demo.local
  image: openanalytics/shinyproxy:3.0.0
  imagePullPolicy: Always
  kubernetesIngressPatches: |
    - op: add
      path: /metadata/annotations
      value:
        nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 300m
    - op: add
      path: /spec/ingressClassName
      value: nginx
  kubernetesPodTemplateSpecPatches: |
    - op: add
      path: /spec/containers/0/env/-
      value:
        name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: redis
            key: redis-password
    - op: add
      path: /spec/containers/0/resources
      value:
        limits:
          cpu: 1
        requests:
          cpu: 0.5
    - op: add
      path: /spec/serviceAccountName
      value: shinyproxy-sa
  management:
    metrics:
      export:
        prometheus:
          enabled: true
  proxy:
    admin-groups: scientists
    authentication: simple
    containerBackend: kubernetes
    defaultMaxInstances: -1
    kubernetes:
      image-pull-policy: Always
      internal-networking: true
      namespace: shinyproxy-operator
    landingPage: /
    logo-url: https://www.openanalytics.eu/shinyproxy/logo.png
    specs:
    - container-env:
        DISABLE_AUTH: true
        WWW_ROOT_PATH: '#{proxy.getRuntimeValue(''SHINYPROXY_PUBLIC_PATH'')}'
      container-image: openanalytics/shinyproxy-rstudio-ide-demo:1.4.1106__4.0.4
      display-name: RStudio
      id: rstudio
      max-instances: 5
      port: 8787
    - container-image: openanalytics/shinyproxy-dash-demo
      display-name: Dash Demo
      id: dash-demo
      kubernetes-pod-patches: |
        - op: replace
          path: /metadata/namespace
          value: shinyproxy1-app
      port: 8050
    - access-groups:
      - scientists
      - mathematicians
      container-cmd:
      - R
      - -e
      - shinyproxy::run_01_hello()
      container-image: openanalytics/shinyproxy-demo
      description: Application which demonstrates the basics of a Shiny app
      display-name: Hello Application
      id: 01_hello
    - access-groups: scientists
      container-cmd:
      - R
      - -e
      - shinyproxy::run_06_tabsets()
      container-image: openanalytics/shinyproxy-demo
      id: 06_tabsets
    store-mode: Redis
    title: Open Analytics Shiny Proxy 2
    usage-stats-url: micrometer
    users:
    - groups: scientists
      name: jack
      password: password
    - groups: mathematicians
      name: jeff
      password: password
  server:
    forward-headers-strategy: native
    servlet:
      context-path: /shinyproxy2
  spring:
    redis:
      password: ${REDIS_PASSWORD}
      sentinel:
        master: shinyproxy
        nodes: redis-node-0.redis-headless:26379, redis-node-1.redis-headless:26379,
          redis-node-2.redis-headless:26379
        password: ${REDIS_PASSWORD}
    session:
      store-type: redis
